# from aiogram import types, Dispatcher, Bot
# from steps import *
# from keyboards import *
# from aiogram.contrib.fsm_storage.memory import MemoryStorage
# from Resumeaiogram import config
# from aiogram.utils import executor, callback_data
# from aiogram.contrib.fsm_storage.memory import MemoryStorage
# from Resumeaiogram.app.database import db_executions
# from Resumeaiogram import config
# from bot_aiogram import get_lang, get_lang_level, get_work_experience, get_job_description, get_how_long
#
# bot = Bot(token=config.Token)
# dp = Dispatcher(bot, storage=MemoryStorage())
#
#
# @dp.message_handler(state=Steps.get_lang)
# async def get_lang(message: types.Message):
#     get_lang = message.text
#     print('lang {}'.format(get_lang))
#     await Steps.get_lang_level.set()
#     await message.answer('–ù–∞–ø–∏—à—ñ—Ç—å —Ä—ñ–≤–µ–Ω—å –∑–Ω–∞–Ω–Ω—è —Ü–∏—Ö –º–æ–≤')
#
#
# @dp.message_handler(state=Steps.get_lang_level)
# async def get_lang_level(message: types.Message):
#     get_lang_level = message.text
#     print('lang_level {}'.format(get_lang_level))
#
#
#
# def cycle_lang(message: types.Message):
#     bot.send_message('–í–≤–µ—Å—Ç–∏ —â–µ –æ–¥–Ω—É –º–æ–≤—É')
#     end_keyboard()
#     if callback_data == 15:
#         Steps.get_lang.set()
#         message.answer('–ù–∞–ø–∏—à—ñ—Ç—å —Ä—ñ–≤–µ–Ω—å –∑–Ω–∞–Ω–Ω—è —Ü–∏—Ö –º–æ–≤')
#     elif callback_data == 16:
#         Steps.get_country.set()
#         message.answer('–ù–∞–ø–∏—à—ñ—Ç—å –∑ —è–∫–æ—ó –≤–∏ –∫—Ä–∞—ó–Ω–∏')
#
#
async def skip_three_functions(message: types.Message, state: FSMContext):
    await get_work_experience(message, state)
    await get_job_description(message, state)
    await get_how_long(message, state)

# —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "Skip 3 functions"
skip_button = KeyboardButton(text="–ù–µ–º–∞—î –¥–æ—Å–≤—ñ–¥—É —Ä–æ–±–æ—Ç–∏")

# —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "Skip 3 functions"
keyboard_skip = ReplyKeyboardMarkup(resize_keyboard=True)
keyboard_skip.add(skip_button)

# –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
# await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏", reply_markup=keyboard)

# –∑–∞–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É
dp.register_message_handler(skip_three_functions, lambda message: message.text == "–ù–µ–º–∞—î –¥–æ—Å–≤—ñ–¥—É —Ä–æ–±–æ—Ç–∏")
#
if message.text == 'üìÑ–°—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–µ–∑—é–º–µüìÑ':
    reply_markup1 = ReplyKeyboardMarkup(resize_keyboard=True)
    await message.answer('–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ —ñ–º‚Äô—è —ñ –ø—Ä—ñ–∑–≤–∏—â–µ', reply_markup=reply_markup1)
    await Steps.name_surname.set()
#
#
#
#
# @dp.message_handler(state=Steps.get_projects)
# async def get_soft_skills(message: types.Message):
#     get_projects = message.text
#     print('projects {}'.format(get_projects))
#     await Steps.get_lang_level.set()
#     await message.answer('–ù–∞–ø–∏—à—ñ—Ç—å –∑ —è–∫—ñ –≤–∏ –∑–Ω–∞—î—Ç–µ –º–æ–≤—É')
#
#
# lang = []
# lang_level = []
#
#
#
# @dp.message_handler(state=Steps.get_lang)
# async def get_lang(message: types.Message):
#     if message.text.lower() == 'stop':
#         await Steps.get_country.set()
#         await message.answer('–ù–∞–ø–∏—à—ñ—Ç—å –∑ —è–∫–æ—ó –≤–∏ –∫—Ä–∞—ó–Ω–∏')
#     else:
#         lang.append(message.text)
#         await Steps.get_lang_level.set()
#         await message.answer('–ù–∞–ø–∏—à—ñ—Ç—å —Ä—ñ–≤–µ–Ω—å –∑–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –º–æ–≤–∏')
#         print('lang {}'.format(lang))
#
# @dp.message_handler(state=Steps.get_lang_level)
# async def get_lang_level(message: types.Message):
#     if message.text.lower() == 'stop':
#         await Steps.get_country.set()
#         await message.answer('–ù–∞–ø–∏—à—ñ—Ç—å –∑ —è–∫–æ—ó –≤–∏ –∫—Ä–∞—ó–Ω–∏')
#     else:
#         lang_level.append(message.text)
#         await Steps.get_lang.set()
#         await message.answer('–ù–∞–ø–∏—à—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—É –º–æ–≤—É –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å stop', reply_markup=lists)
#         print('lang_level {}'.format(lang_level))
# @dp.message_handler(state=Steps.get_country)
