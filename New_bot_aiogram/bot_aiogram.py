import random
import string
from io import BytesIO
from PIL import Image
from aiogram import types, Dispatcher, Bot
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from Resumeaiogram import config
from admins_notify import notify_admins
from Resumeaiogram.database.SQLAlchemy_connection import session, ResumeBot
from steps import Steps
from keyboards import but_create, end_keyboard, changes, lists, confirm, work_pass, image
from aiogram.dispatcher import FSMContext

bot = Bot(token=config.Token)
dp = Dispatcher(bot, storage=MemoryStorage())


@dp.message_handler(commands=['instruction'], state='*')
async def instruction(message: types.Message,state: FSMContext):
    await bot.send_message(message.chat.id, '–¢—É—Ç –≤—Å–µ –ø—Ä–æ—Å—Ç–æ) \n'
                                            '–í—Å—ñ –¥–∞–Ω–Ω—ñ —Å–ª—ñ–¥ –∑–∞–ø–∏—Å—É–≤–∞—Ç–∏ —á–µ—Ä–µ–∑ –∫–æ–º—É, –∞ –∫–æ–ª–∏ –ø–æ–±–∞—á–∏—Ç–µ "üî¥",'
                                            '—Ç–æ —Ç—Ä–µ–±–∞ –≤–≤–æ–¥–∏—Ç–∏ —Å–≤–æ—ó –¥–∞–Ω–Ω—ñ –ø–æ –æ–¥–Ω–æ–º—É, —Ç–æ–±—Ç–æ –æ–¥–∏–Ω –ø—É–Ω–∫—Ç'
                                            ' –≤ –æ–¥–Ω–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ.\n'
                                            '–ü—Ä–æ–ø–æ–Ω—É—î–º–æ —Å–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–¥–∏–≤–∏—Ç–∏—Å—è –ø—Ä–∏–∫–ª–∞–¥ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è: /example')
    await state.finish()


@dp.message_handler(commands=['example'], state='*')
async def example(message: types.Message,state: FSMContext):
    photo = open('resume_example.jpg', 'rb')
    await bot.send_message(message.chat.id, '–û—Å—å –ø—Ä–∏–∫–ª–∞–¥ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ä–µ–∑—é–º–µ:')
    await bot.send_photo(message.chat.id, photo=photo)
    await state.finish()


@dp.message_handler(commands=['clear'], state='*')
async def clear(message: types.Message,state: FSMContext):
    await bot.send_message(message.chat.id, '–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ –¥–∞–Ω–Ω—ñ?', reply_markup=confirm)
    await state.finish()


@dp.message_handler(commands=['website'], state='*')
async def website(message: types.Message,state: FSMContext):
    resumes = session.query(ResumeBot).filter_by(id=message.chat.id).all()
    for resume in resumes:
        await bot.send_message(message.chat.id, f"–í–∞—à—ñ –¥–∞–Ω—ñ –¥–ª—è –≤—Ö–æ–¥—É:\n"
                                                f"ID = {resume.id}\n"
                                                f"PASSWORD = {resume.password}")
    await state.finish()


@dp.message_handler(commands=['start'], state='*')
async def start(message: types.Message, state: FSMContext):
    await bot.send_message(message.chat.id, 'üëã–ü—Ä–∏–≤—ñ—Ç, {}!üëã\n'
                                            'üòÉ–¶–µ –±–æ—Ç –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∑—é–º–µ, –¥—É–º–∞—é —Ç–æ–±—ñ —Å–ø–æ–¥–æ–±–∞—î—Ç—å—Å—èüòÉ \n'
                                            '–Ø–∫—â–æ –≤–∏ –≤–ø–µ—Ä—à–µ —Å–∫–ª–∞–¥–∞—î—Ç–µ —Ä–µ–∑—é–º–µ, —Ç–æ –æ–∑–Ω–∞–π–æ–º—Ç–µ—Å—è —è–∫ —Ü–µ –∫—Ä–∞—â–µ –∑—Ä–æ–±–∏—Ç–∏: \n'
                                            '/instruction \n'
                                            '/example\n'
                                            '–Ø–∫—â–æ –±–∞–∂–∞—î—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –º–∏–Ω—É–ª—ñ –¥–∞–Ω—ñ, —Ç–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /clear'.format
    (message.from_user.first_name), reply_markup=but_create)
    existing_user = session.query(ResumeBot).filter_by(id=message.chat.id).first()
    await state.finish()
    if existing_user:
        pass
    else:
        # –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
        new_user = ResumeBot(id=message.chat.id)
        session.add(new_user)
        session.commit()


@dp.message_handler(content_types=['text'])
async def create_resume(message: types.Message):
    if message.text == 'üìÑ–°—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–µ–∑—é–º–µüìÑ':
        await message.answer('–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ —ñ–º‚Äô—è —ñ –ø—Ä—ñ–∑–≤–∏—â–µ', reply_markup=types.ReplyKeyboardRemove())
        # PASSWORD
        characters = string.ascii_letters + string.digits + string.punctuation
        password = ''.join(random.choice(characters) for i in range(8))
        try:
            existing_user = session.query(ResumeBot).filter_by(id=message.chat.id).first()
            existing_user.update_info(password=password)
            session.commit()
            await Steps.name_surname.set()
        except :
            await bot.send_message(message.chat.id, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞')


@dp.message_handler(content_types=['text'], state=Steps.name_surname)
async def name_surname(message: types.Message):
    try:
        existing_user = session.query(ResumeBot).filter_by(id=message.chat.id).first()
        existing_user.update_info(name_surname=message.text)
        session.commit()
        print('name_surname {}'.format(message.text))
        await Steps.get_image.set()
        await message.answer('–ü—Ä–∏–∫—Ä—ñ–ø—ñ—Ç—å —Å–≤–æ—î —Ñ–æ—Ç–æ', reply_markup=image)
    except :
        await message.answer('–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞')


@dp.message_handler(content_types=['photo', 'text'], state=Steps.get_image)
async def get_image(message: types.Message):
    try:
        if message.text == '–ù–µ —Ö–æ—á—É –¥–æ–¥–∞–≤–∞—Ç–∏ —Ñ–æ—Ç–æ':
            await bot.send_message(message.chat.id, '–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É')
            await Steps.phone_number.set()
        else:
            existing_user = session.query(ResumeBot).filter_by(id=message.chat.id).first()
            photo = message.photo[-1]
            file = await photo.get_file()

            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –±–∞–π—Ç—ã
            image_bytes = BytesIO()
            await file.download(destination_file=image_bytes)
            image_bytes.seek(0)

            # –û—Ç–∫—Ä—ã—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Pillow
            image = Image.open(image_bytes)

            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ –≤ –±–∞–π—Ç—ã
            image_bytes = BytesIO()
            image.save(image_bytes, format='JPEG')
            image_bytes.seek(0)

            existing_user.update_info(image=image_bytes.read())
            session.commit()
            await bot.send_message(message.chat.id, '–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É', reply_markup=types.ReplyKeyboardRemove())
            await Steps.phone_number.set()
    except:
        await bot.send_message(message.chat.id, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞')


@dp.message_handler(content_types=['text'], state=Steps.phone_number)
async def phone_number(message: types.Message):
    try:
        existing_user = session.query(ResumeBot).filter_by(id=message.chat.id).first()
        existing_user.update_info(phone_number=message.text)
        session.commit()
        print('phone_number {}'.format(message.text))
        await Steps.get_email.set()
        await message.answer('–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à email')
    except :
        await bot.send_message(message.chat.id, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞')


@dp.message_handler(state=Steps.get_email)
async def get_email(message: types.Message):
    try:
        existing_user = session.query(ResumeBot).filter_by(id=message.chat.id).first()
        existing_user.update_info(email=message.text)
        session.commit()
        print('email {}'.format(get_email))
        await Steps.get_education.set()
        await message.answer('–ù–∞–ø–∏—à—ñ—Ç—å —Ä—ñ–≤–µ–Ω—å –≤–∞—à–æ—ó –æ—Å–≤—ñ—Ç–∏')
    except :
        await bot.send_message(message.chat.id, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞')


@dp.message_handler(state=Steps.get_education)
async def get_education(message: types.Message):
    try:
        existing_user = session.query(ResumeBot).filter_by(id=message.chat.id).first()
        existing_user.update_info(education=message.text.split(','))
        session.commit()
        print('get_education {}'.format(message.text))
        await message.answer('–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à—ñ Tech Skills')
        await Steps.get_tech_skills.set()
    except :
        await bot.send_message(message.chat.id, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞')


@dp.message_handler(state=Steps.get_tech_skills)
async def get_tech_skills(message: types.Message):
    try:
        existing_user = session.query(ResumeBot).filter_by(id=message.chat.id).first()
        existing_user.update_info(tech_skills=message.text.split(','))
        session.commit()
        print('tech skills {}'.format(message.text))
        await Steps.get_soft_skills.set()
        await message.answer('–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à—ñ Soft Skills')
    except :
        await bot.send_message(message.chat.id, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞')


@dp.message_handler(state=Steps.get_soft_skills)
async def get_soft_skills(message: types.Message()):
    try:
        existing_user = session.query(ResumeBot).filter_by(id=message.chat.id).first()
        existing_user.update_info(soft_skills=message.text.split(','))
        session.commit()
        print('soft skills {}'.format(message.text))
        await Steps.get_projects.set()
        await message.answer('–î–æ–¥–∞–π—Ç–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≤–∞—à—ñ –ø—Ä–æ–µ–∫—Ç–∏')
    except :
        await bot.send_message(message.chat.id, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞')


@dp.message_handler(state=Steps.get_projects)
async def get_projects(message: types.Message):
    try:
        existing_user = session.query(ResumeBot).filter_by(id=message.chat.id).first()
        existing_user.update_info(projects=message.text.split(','))
        session.commit()
        print('projects {}'.format(message.text))
        await Steps.get_lang.set()
        await message.answer('–ù–∞–ø–∏—à—ñ—Ç—å —è–∫—É –≤–∏ –∑–Ω–∞—î—Ç–µ –º–æ–≤—Éüî¥')
    except :
        await bot.send_message(message.chat.id, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞')


@dp.message_handler(state=Steps.get_lang)
async def get_lang(message: types.Message):
    try:
        if message.text.lower() == 'stop':
            await Steps.get_country.set()
            await message.answer('–ù–∞–ø–∏—à—ñ—Ç—å –∑ —è–∫–æ—ó –≤–∏ –∫—Ä–∞—ó–Ω–∏')
        else:
            existing_user = session.query(ResumeBot).filter_by(id=message.chat.id).first()
            new = []
            if existing_user.lang:
                for i in existing_user.lang:
                    new.append(i)
            new.append(message.text)
            existing_user.update_info(lang=new)
            session.commit()
            print('lang{}'.format(message.text))
            await Steps.get_lang_level.set()
            await message.answer('–ù–∞–ø–∏—à—ñ—Ç—å —Ä—ñ–≤–µ–Ω—å –º–æ–≤–∏üî¥', reply_markup=types.ReplyKeyboardRemove())
    except :
        await bot.send_message(message.chat.id, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞')


@dp.message_handler(state=Steps.get_lang_level)
async def get_lang_level(message: types.Message):
    try:
        if message.text.lower() == 'stop':
            await Steps.get_country.set()
            await message.answer('–ù–∞–ø–∏—à—ñ—Ç—å –∑ —è–∫–æ—ó –≤–∏ –∫—Ä–∞—ó–Ω–∏')
        else:
            existing_user = session.query(ResumeBot).filter_by(id=message.chat.id).first()
            new = []
            if existing_user.lang_level:
                for i in existing_user.lang_level:
                    new.append(i)
            new.append(message.text)
            existing_user.update_info(lang_level=new)
            session.commit()
            await Steps.get_lang.set()
            await message.answer('–ù–∞–ø–∏—à—ñ—Ç—å —è–∫—É –≤–∏ –∑–Ω–∞—î—Ç–µ –º–æ–≤—É', reply_markup=lists)
    except :
        await bot.send_message(message.chat.id, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞')


@dp.message_handler(state=Steps.get_country)
async def get_country(message: types.Message):
    try:
        existing_user = session.query(ResumeBot).filter_by(id=message.chat.id).first()
        existing_user.update_info(country=message.text)
        session.commit()
        print('country {}'.format(message.text))
        await Steps.get_city.set()
        await message.answer('–ù–∞–ø–∏—à—ñ—Ç—å –∑ —è–∫–æ–≥–æ –≤–∏ –º—ñ—Å—Ç–∞')
    except :
        await bot.send_message(message.chat.id, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞')


@dp.message_handler(state=Steps.get_city)
async def get_city(message: types.Message):
    try:
        existing_user = session.query(ResumeBot).filter_by(id=message.chat.id).first()
        existing_user.update_info(city=message.text)
        session.commit()
        print('city {}'.format(message.text))
        await Steps.get_profession.set()
        await message.answer('–ù–∞–ø–∏—à—ñ—Ç—å –Ω–∞ —è–∫—É –ø–æ—Å–∞–¥—É –ø—Ä–µ—Ç–µ–Ω–¥—É—î—Ç–µ')
    except :
        await bot.send_message(message.chat.id, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞')


@dp.message_handler(state=Steps.get_profession)
async def get_profession(message: types.Message):
    try:
        existing_user = session.query(ResumeBot).filter_by(id=message.chat.id).first()
        existing_user.update_info(profession=message.text)
        session.commit()
        print('profession {}'.format(message.text))
        await Steps.get_description.set()
        await message.answer('–ù–∞–ø–∏—à—ñ—Ç—å, —â–æ –≤–∏ –æ—á—ñ–∫—É—î—Ç–µ –≤—ñ–¥ —Ü—ñ—î—ó –ø–æ—Å–∞–¥–∏(–º–æ–∂–µ—Ç–µ —Ä–æ–∑–ø–æ–≤—ñ—Å—Ç–∏ —â–æ—Å—å –ø—Ä–æ —Å–µ–±–µ')
    except :
        await bot.send_message(message.chat.id, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞')


@dp.message_handler(state=Steps.get_description)
async def get_description(message: types.Message):
    try:
        existing_user = session.query(ResumeBot).filter_by(id=message.chat.id).first()
        existing_user.update_info(description=message.text)
        session.commit()
        print('description {}'.format(message.text))
        await Steps.get_work_experience.set()
        await message.answer('–ù–∞–ø–∏—à—ñ—Ç—å –ø—Ä–æ –≤–∞—à –º–∏–Ω—É–ª–∏–π –¥–æ—Å–≤—ñ–¥ —Ä–æ–±–æ—Ç–∏(–Ω–∞–∑–≤–∞ –ø–æ—Å–∞–¥–∏)üî¥',reply_markup=work_pass)
    except :
        await bot.send_message(message.chat.id, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞')


@dp.message_handler(state=Steps.get_work_experience)
async def get_work_experience(message: types.Message):
    existing_user = session.query(ResumeBot).filter_by(id=message.chat.id).first()
    new = []
    try:
        if message.text.lower() == 'stop' or message.text.lower() == '–Ω–µ–º–∞—î –¥–æ—Å–≤—ñ–¥—É —Ä–æ–±–æ—Ç–∏':
            await bot.send_message(message.chat.id, 'üòé–í–∞—à–µ —Ä–µ–∑—é–º–µ –≥–æ—Ç–æ–≤–µ, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Å–≤–æ—ó –¥–∞–Ω—ñ:üòé', reply_markup=types.ReplyKeyboardRemove())
            await end_message(message)
        else:
            if existing_user.past_work == None:
                new.append(message.text)
                existing_user.update_info(past_work=new)
                session.commit()
            else:
                for i in existing_user.past_work:
                    new.append(i)
                new.append(message.text)
                existing_user.update_info(past_work=new)
                session.commit()
            print('get_work_experience {}'.format(message.text))
            await Steps.get_job_description.set()
            await message.answer('–û–ø–∏—à—ñ—Ç—å, —â–æ —Ä–æ–±–∏–ª–∏ –Ω–∞ —Ü—ñ–π —Ä–æ–±–æ—Ç—ñüî¥', reply_markup=lists)
    except Exception as e:
        print(e)
        await bot.send_message(message.chat.id, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞')


@dp.message_handler(state=Steps.get_job_description)
async def get_job_description(message: types.Message):
    existing_user = session.query(ResumeBot).filter_by(id=message.chat.id).first()
    new = []
    try:
        if message.text.lower() == 'stop' or message.text.lower() == '–ù–µ–º–∞—î –¥–æ—Å–≤—ñ–¥—É —Ä–æ–±–æ—Ç–∏':
            await bot.send_message(message.chat.id, 'üòé–í–∞—à–µ —Ä–µ–∑—é–º–µ –≥–æ—Ç–æ–≤–µ, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Å–≤–æ—ó –¥–∞–Ω—ñ:üòé')
            await end_message(message)
        else:
            if existing_user.job_description == None:
                new.append(message.text)
                existing_user.update_info(job_description=new)
                session.commit()
            else:
                for i in existing_user.job_description:
                    new.append(i)
                new.append(str(message.text))
                existing_user.update_info(job_description=new)
                session.commit()
            print('get_job_description {}'.format(message.text))
            await Steps.get_how_long.set()
            await message.answer('–°–∫—ñ–ª—å–∫–∏ —á–∞—Å—É –≤–∏ –∑–∞–π–º–∞–ª–∏ —Ü—é –ø–æ—Å–∞–¥—É?üî¥', reply_markup=types.ReplyKeyboardRemove())
    except :
        await bot.send_message(message.chat.id, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞')


@dp.message_handler(state=Steps.get_how_long)
async def get_how_long(message: types.Message):
    existing_user = session.query(ResumeBot).filter_by(id=message.chat.id).first()
    new = []
    try:
        if message.text.lower() == 'stop' or message.text.lower() == '–ù–µ–º–∞—î –¥–æ—Å–≤—ñ–¥—É —Ä–æ–±–æ—Ç–∏':
            await bot.send_message(message.chat.id, 'üòé–í–∞—à–µ —Ä–µ–∑—é–º–µ –≥–æ—Ç–æ–≤–µ, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Å–≤–æ—ó –¥–∞–Ω—ñ:üòé')
            await end_message(message)
        else:
            if existing_user.how_long == None:
                new.append(message.text)
                existing_user.update_info(how_long=new)
                session.commit()
            else:
                for i in existing_user.how_long:
                    new.append(i)
                new.append(str(message.text))
                existing_user.update_info(how_long=new)
                session.commit()
            print('get_how_long {}'.format(message.text))
            await Steps.get_work_experience.set()
            await message.answer('–ù–∞–ø–∏—à—ñ—Ç—å –ø—Ä–æ –≤–∞—à –º–∏–Ω—É–ª–∏–π –¥–æ—Å–≤—ñ–¥ —Ä–æ–±–æ—Ç–∏(–Ω–∞–∑–≤–∞ –ø–æ—Å–∞–¥–∏)üî¥')
    except:
        await bot.send_message(message.chat.id, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞')


async def end_message(message):
    resumes = session.query(ResumeBot).filter_by(id=message.chat.id).all()
    for resume in resumes:
        await bot.send_message(message.chat.id, f"–Ü–º'—è —Ç–∞ –ø—Ä—ñ–∑–∏–≤—â–µ: {resume.name_surname}\n"
                                                f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: {resume.phone_number}\n"
                                                f"–ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –ø–æ—à—Ç–∞: {resume.email}\n"
                                                f"–û—Å–≤—ñ—Ç–∞: {resume.education}\n"
                                                f"Tech –ù–∞–≤–∏—á–∫–∏: {resume.tech_skills}\n"
                                                f"Soft –ù–∞–≤–∏—á–∫–∏: {resume.soft_skills}\n"
                                                f"–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≤–∞—à—ñ –ø—Ä–æ–µ–∫—Ç–∏: {resume.projects}\n"
                                                f"–ú–æ–≤–∏: {resume.lang}\n"
                                                f"–†—ñ–≤–µ–Ω—å –∑–Ω–∞–Ω–Ω—è —Ü–∏—Ö –º–æ–≤:{resume.lang_level}\n"
                                                f"–í–∞—à–∞ –∫—Ä–∞—ó–Ω–∞: {resume.country}\n"
                                                f"–í–∞—à–µ –º—ñ—Å—Ç–æ: {resume.city}\n"
                                                f"–ü–æ—Å–∞–¥–∞ –Ω–∞ —è–∫—É –ø—Ä–µ—Ç–µ–Ω–¥—É—î—Ç–µ: {resume.profession}\n"
                                                f"–í–∞—à—ñ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤—ñ–¥ —Ä–æ–±–æ—Ç–∏: {resume.description}\n"
                                                f"–©–æ –≤–∏ —Ä–æ–±–∏–ª–∏ –Ω–∞ –º–∏–Ω—É–ª—ñ–π –ø–æ—Å–∞–¥—ñ: {resume.past_work}\n"
                                                f"–°–∫—ñ–ª—å–∫–∏ —á–∞—Å—É –≤–∏ –∑–∞–π–º–∞–ª–∏ —Ü—é –ø–æ—Å–∞–¥—É: {resume.how_long}\n"
                                                "–ß–∏ —Ö–æ—á–µ—Ç–µ –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Å–≤–æ—ó –¥–∞–Ω—ñ?'\n", reply_markup=end_keyboard)


@dp.callback_query_handler(state='*')
async def bot_changes(callback: types.callback_query):
    if callback.data == '15':
        await bot.send_message(callback.from_user.id, "–©–æ –±–∞–∂–∞—î—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏?", reply_markup=changes)
    elif callback.data == '16':
        resumes = session.query(ResumeBot).filter_by(id=callback.from_user.id).all()
        for resume in resumes:
            await bot.send_message(callback.from_user.id, f"–í—Å–µ –≥–æ—Ç–æ–≤–æ, –º–æ–∂–µ—Ç–µ –∑–∞–π—Ç–∏ –¥–æ —Å–∞–π—Ç—É —ñ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–≤–æ—î —Ä–µ–∑—é–º–µü•≥\n"
                                                      "–í–∞—à—ñ –¥–∞–Ω—ñ –¥–ª—è –≤—Ö–æ–¥—É:\n"
                                                      f"ID = {resume.id}\n"
                                                      f"PASSWORD = {resume.password}")
        await bot.send_message(callback.from_user.id, "http://goiteens2.pythonanywhere.com/")

    if callback.data == 'name_surname':
        await bot.send_message(callback.from_user.id, "–ù–æ–≤–µ –Ω–æ–≤–µ –ø—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ —ñ–º'—è")
        await Steps.name_surname_edit.set()

    elif callback.data == 'image':
        await bot.send_message(callback.from_user.id, "–í—ñ–¥–ø—Ä–∞–≤–ª—è–π—Ç–µ –Ω–æ–≤—É —Ñ–æ—Ç–∫—É")
        await Steps.image_edit.set()

    if callback.data == 'phone':
        await bot.send_message(callback.from_user.id, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É")
        await Steps.phone_number_edit.set()

    if callback.data == 'email':
        await bot.send_message(callback.from_user.id, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π email")
        await Steps.email_edit.set()

    if callback.data == 'education':
        await bot.send_message(callback.from_user.id, "–ù–∞–ø–∏—à—ñ—Ç—å —Ä—ñ–≤–µ–Ω—å –≤–∞—à–æ—ó –æ—Å–≤—ñ—Ç–∏")
        await Steps.education_edit.set()

    if callback.data == 'soft_skills':
        await bot.send_message(callback.from_user.id, "–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à—ñ Soft Skills")
        await Steps.soft_skills_edit.set()
    if callback.data == 'tech_skills':
        await bot.send_message(callback.from_user.id, "–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à—ñ Tech Skills")
        await Steps.tech_skills_edit.set()
    if callback.data == 'projects':
        await bot.send_message(callback.from_user.id, "–î–æ–¥–∞–π—Ç–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≤–∞—à—ñ –ø—Ä–æ–µ–∫—Ç–∏")
        await Steps.projects_edit.set()
    if callback.data == 'lang':
        await bot.send_message(callback.from_user.id, "–ù–∞–ø–∏—à—ñ—Ç—å —è–∫—ñ –≤–∏ –∑–Ω–∞—î—Ç–µ –º–æ–≤–∏ ")
        await Steps.lang_edit.set()
    if callback.data == 'lang_level':
        await bot.send_message(callback.from_user.id, "–ù–∞–ø–∏—à—ñ—Ç—å —Ä—ñ–≤–Ω—ñ –≤–∞—à–∏—Ö –º–æ–≤")
        await Steps.lang_level_edit.set()
    if callback.data == 'country':
        await bot.send_message(callback.from_user.id, "–ù–∞–ø–∏—à—ñ—Ç—å –∑ —è–∫–æ—ó –≤–∏ –∫—Ä–∞—ó–Ω–∏")
        await Steps.country_edit.set()
    if callback.data == 'city':
        await bot.send_message(callback.from_user.id, "–ù–∞–ø–∏—à—ñ—Ç—å –∑ —è–∫–æ–≥–æ –≤–∏ –º—ñ—Å—Ç–∞")
        await Steps.city_edit.set()
    if callback.data == 'profession':
        await bot.send_message(callback.from_user.id, "–ù–∞–ø–∏—à—ñ—Ç—å –Ω–∞ —è–∫—É –ø–æ—Å–∞–¥—É –≤–∏ –ø—Ä–µ—Ç–µ–Ω–¥—É—î—Ç–µ")
        await Steps.profession_edit.set()
    if callback.data == 'description':
        await bot.send_message(callback.from_user.id, "–ù–∞–ø–∏—à—ñ—Ç—å, —â–æ –≤–∏ –æ—á—ñ–∫—É—î—Ç–µ –≤—ñ–¥ —Ü—ñ—î—ó –ø–æ—Å–∞–¥–∏(–º–æ–∂–µ—Ç–µ —Ä–æ–∑–ø–æ–≤—ñ—Å—Ç–∏ —â–æ—Å—å –ø—Ä–æ —Å–µ–±–µ")
        await Steps.description_edit.set()
    if callback.data == 'work_experience':
        await bot.send_message(callback.from_user.id,"–ù–∞–ø–∏—à—ñ—Ç—å –ø—Ä–æ –≤–∞—à –º–∏–Ω—É–ª–∏–π –¥–æ—Å–≤—ñ–¥ —Ä–æ–±–æ—Ç–∏")
        await Steps.work_experience_edit.set()
    if callback.data == 'job_description':
        await bot.send_message(callback.from_user.id, "–ù–∞–ø–∏—à—ñ—Ç—å, —â–æ –≤–∏ —Ä–æ–±–∏–ª–∏ –Ω–∞ –≤–∞—à—ñ–π –º–∏–Ω—É–ª—ñ–π —Ä–æ–±–æ—Ç—ñ")
        await Steps.job_description_edit.set()
    if callback.data == 'how_long':
        await bot.send_message(callback.from_user.id, "–ù–∞–ø–∏—à—ñ—Ç—å —Å–∫—ñ–ª—å–∫–∏ —á–∞—Å—É –≤–∏ –ø—Ä–∞—Ü—é–≤–∞–ª–∏ –Ω–∞ –º–∏–Ω—É–ª—ñ–π —Ä–æ–±–æ—Ç—ñ")
        await Steps.how_long_edit.set()
    if callback.data == 'confirm':
        try:
            session.query(ResumeBot).filter_by(id=callback.from_user.id).delete()
            session.commit()
            await bot.send_message(callback.from_user.id, '–í–∞—à—ñ –¥–∞–Ω–Ω—ñ –≤–∏–¥–∞–ª–µ–Ω–æ\n'
                                                          '/start')
        except :
            await bot.send_message(callback.from_user.id, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞')
    if callback.data == 'cancel':
        await bot.send_message(callback.from_user.id, '–û–ø–µ—Ä–∞—Ü—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞')


@dp.message_handler(state=Steps.name_surname_edit)
async def edit_name_surname(message: types.Message):
    try:
        existing_user = session.query(ResumeBot).filter_by(id=message.chat.id).first()
        existing_user.update_info(name_surname=message.text)
        session.commit()
        await bot.send_message(message.chat.id, '–í–∞—à—ñ –¥–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ')
        await bot.send_message(message.chat.id, '–ë–∞–∂–∞—î—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —â–µ —â–æ—Å—å?', reply_markup=end_keyboard)
    except :
        await bot.send_message(message.chat.id, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞')


@dp.message_handler(content_types=['photo'], state=Steps.image_edit)
async def image_edit(message: types.Message):
    try:
        existing_user = session.query(ResumeBot).filter_by(id=message.chat.id).first()
        photo = message.photo[-1]
        file = await photo.get_file()

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –±–∞–π—Ç—ã
        image_bytes = BytesIO()
        await file.download(destination_file=image_bytes)
        image_bytes.seek(0)

        # –û—Ç–∫—Ä—ã—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Pillow
        image = Image.open(image_bytes)

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ –≤ –±–∞–π—Ç—ã
        image_bytes = BytesIO()
        image.save(image_bytes, format='JPEG')
        image_bytes.seek(0)

        existing_user.update_info(image=image_bytes.read())
        session.commit()
        await bot.send_message(message.chat.id, '–í–∞—à—ñ –¥–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ')
        await bot.send_message(message.chat.id, '–ë–∞–∂–∞—î—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —â–µ —â–æ—Å—å?', reply_markup=end_keyboard)
    except:
        await bot.send_message(message.chat.id, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞')


@dp.message_handler(state=Steps.phone_number_edit)
async def edit_phone_number(message: types.Message):
    try:
        existing_user = session.query(ResumeBot).filter_by(id=message.chat.id).first()
        existing_user.update_info(phone_number=message.text)
        session.commit()
        await bot.send_message(message.chat.id, '–í–∞—à—ñ –¥–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ')
        await bot.send_message(message.chat.id, '–ë–∞–∂–∞—î—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —â–µ —â–æ—Å—å?', reply_markup=end_keyboard)
    except :
        await bot.send_message(message.chat.id, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞')


@dp.message_handler(state=Steps.email_edit)
async def edit_email(message: types.Message):
    try:
        existing_user = session.query(ResumeBot).filter_by(id=message.chat.id).first()
        existing_user.update_info(email=message.text)
        session.commit()
        await bot.send_message(message.chat.id, '–í–∞—à—ñ –¥–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ')
        await bot.send_message(message.chat.id, '–ë–∞–∂–∞—î—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —â–µ —â–æ—Å—å?', reply_markup=end_keyboard)
    except :
        await bot.send_message(message.chat.id, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞')


@dp.message_handler(state=Steps.education_edit)
async def edit_education(message: types.Message):
    try:
        existing_user = session.query(ResumeBot).filter_by(id=message.chat.id).first()
        existing_user.update_info(education=message.text.split(','))
        session.commit()
        await bot.send_message(message.chat.id, '–í–∞—à—ñ –¥–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ')
        await bot.send_message(message.chat.id, '–ë–∞–∂–∞—î—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —â–µ —â–æ—Å—å?', reply_markup=end_keyboard)
    except :
        await bot.send_message(message.chat.id, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞')


@dp.message_handler(state=Steps.soft_skills_edit)
async def edit_soft_skills(message: types.Message):
    try:
        existing_user = session.query(ResumeBot).filter_by(id=message.chat.id).first()
        existing_user.update_info(soft_skills=message.text.split(','))
        session.commit()
        await bot.send_message(message.chat.id, '–í–∞—à—ñ –¥–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ')
        await bot.send_message(message.chat.id, '–ë–∞–∂–∞—î—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —â–µ —â–æ—Å—å?', reply_markup=end_keyboard)
    except :
        await bot.send_message(message.chat.id, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞')


@dp.message_handler(state=Steps.tech_skills_edit)
async def edit_tech_skills(message: types.Message):
    try:
        existing_user = session.query(ResumeBot).filter_by(id=message.chat.id).first()
        existing_user.update_info(tech_skills=message.text.split(','))
        session.commit()
        await bot.send_message(message.chat.id, '–í–∞—à—ñ –¥–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ')
        await bot.send_message(message.chat.id, '–ë–∞–∂–∞—î—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —â–µ —â–æ—Å—å?', reply_markup=end_keyboard)
    except:
        await bot.send_message(message.chat.id, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞')


@dp.message_handler(state=Steps.projects_edit)
async def edit_projects(message: types.Message):
    try:
        existing_user = session.query(ResumeBot).filter_by(id=message.chat.id).first()
        existing_user.update_info(projects=message.text.split(','))
        session.commit()
        await bot.send_message(message.chat.id, '–í–∞—à—ñ –¥–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ')
        await bot.send_message(message.chat.id, '–ë–∞–∂–∞—î—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —â–µ —â–æ—Å—å?', reply_markup=end_keyboard)
    except:
        await bot.send_message(message.chat.id, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞')


@dp.message_handler(state=Steps.lang_edit)
async def edit_lang(message: types.Message):
    try:
        existing_user = session.query(ResumeBot).filter_by(id=message.chat.id).first()
        existing_user.update_info(lang=message.text.split(','))
        session.commit()
        await bot.send_message(message.chat.id, '–í–∞—à—ñ –¥–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ')
        await bot.send_message(message.chat.id, '–ë–∞–∂–∞—î—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —â–µ —â–æ—Å—å?', reply_markup=end_keyboard)
    except:
        await bot.send_message(message.chat.id, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞')


@dp.message_handler(state=Steps.lang_level_edit)
async def edit_lang_level(message: types.Message):
    try:
        existing_user = session.query(ResumeBot).filter_by(id=message.chat.id).first()
        existing_user.update_info(lang_level=message.text.split(','))
        session.commit()
        await bot.send_message(message.chat.id, '–í–∞—à—ñ –¥–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ')
        await bot.send_message(message.chat.id, '–ë–∞–∂–∞—î—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —â–µ —â–æ—Å—å?', reply_markup=end_keyboard)
    except:
        await bot.send_message(message.chat.id, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞')


@dp.message_handler(state=Steps.country_edit)
async def edit_country(message: types.Message):
    try:
        existing_user = session.query(ResumeBot).filter_by(id=message.chat.id).first()
        existing_user.update_info(country=message.text)
        session.commit()
        await bot.send_message(message.chat.id, '–í–∞—à—ñ –¥–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ')
        await bot.send_message(message.chat.id, '–ë–∞–∂–∞—î—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —â–µ —â–æ—Å—å?', reply_markup=end_keyboard)
    except:
        await bot.send_message(message.chat.id, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞')


@dp.message_handler(state=Steps.city_edit)
async def edit_city(message: types.Message):
    try:
        existing_user = session.query(ResumeBot).filter_by(id=message.chat.id).first()
        existing_user.update_info(city=message.text)
        session.commit()
        await bot.send_message(message.chat.id, '–í–∞—à—ñ –¥–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ')
        await bot.send_message(message.chat.id, '–ë–∞–∂–∞—î—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —â–µ —â–æ—Å—å?', reply_markup=end_keyboard)
    except:
        await bot.send_message(message.chat.id, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞')


@dp.message_handler(state=Steps.profession_edit)
async def edit_profession(message: types.Message):
    try:
        existing_user = session.query(ResumeBot).filter_by(id=message.chat.id).first()
        existing_user.update_info(profession=message.text)
        session.commit()
        await bot.send_message(message.chat.id, '–í–∞—à—ñ –¥–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ')
        await bot.send_message(message.chat.id, '–ë–∞–∂–∞—î—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —â–µ —â–æ—Å—å?', reply_markup=end_keyboard)
    except:
        await bot.send_message(message.chat.id, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞')


@dp.message_handler(state=Steps.description_edit)
async def edit_description(message: types.Message):
    try:
        existing_user = session.query(ResumeBot).filter_by(id=message.chat.id).first()
        existing_user.update_info(description=message.text)
        session.commit()
        await bot.send_message(message.chat.id, '–í–∞—à—ñ –¥–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ')
        await bot.send_message(message.chat.id, '–ë–∞–∂–∞—î—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —â–µ —â–æ—Å—å?', reply_markup=end_keyboard)
    except:
        await bot.send_message(message.chat.id, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞')


@dp.message_handler(state=Steps.work_experience_edit)
async def work_experience_edit(message: types.Message):
    try:
        existing_user = session.query(ResumeBot).filter_by(id=message.chat.id).first()
        existing_user.update_info(past_work=message.text.split(","))
        session.commit()
        await bot.send_message(message.chat.id, '–í–∞—à—ñ –¥–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ')
        await bot.send_message(message.chat.id, '–ë–∞–∂–∞—î—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —â–µ —â–æ—Å—å?', reply_markup=end_keyboard)
    except:
        await bot.send_message(message.chat.id, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞')


@dp.message_handler(state=Steps.job_description_edit)
async def edit_job_description(message: types.Message):
    try:
        existing_user = session.query(ResumeBot).filter_by(id=message.chat.id).first()
        existing_user.update_info(job_description=message.text.split(','))
        session.commit()
        await bot.send_message(message.chat.id, '–í–∞—à—ñ –¥–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ')
        await bot.send_message(message.chat.id, '–ë–∞–∂–∞—î—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —â–µ —â–æ—Å—å?', reply_markup=end_keyboard)
    except:
        await bot.send_message(message.chat.id, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞')


@dp.message_handler(state=Steps.how_long_edit)
async def edit_how_long(message: types.Message):
    try:
        existing_user = session.query(ResumeBot).filter_by(id=message.chat.id).first()
        existing_user.update_info(how_long=message.text.split(','))
        session.commit()
        await bot.send_message(message.chat.id, '–í–∞—à—ñ –¥–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ')
        await bot.send_message(message.chat.id, '–ë–∞–∂–∞—î—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —â–µ —â–æ—Å—å?', reply_markup=end_keyboard)
    except:
        await bot.send_message(message.chat.id, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞')


async def on_startup(dp):
    await notify_admins(dp)

if __name__ == '__main__':
    executor.start_polling(dp)
