import random
import string

from aiogram import types, Dispatcher, Bot
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage

#import config
# from Resumeaiogram.New_bot_aiogram import edit_answers
# from Resumeaiogram.app.database import db_executions
from Resumeaiogram import config

import edit_answers
#from app.database import db_executions
from admins_notify import notify_admins
#from database import db_executions

# from Resumeaiogram import config
from Resumeaiogram.database import db_executions

# from app.database import db_executions
from steps import *
from keyboards import *

bot = Bot(token=config.Token)
dp = Dispatcher(bot, storage=MemoryStorage())


@dp.message_handler(commands=['instruction'], state='*')
async def instruction(message: types.Message):
    await bot.send_message(message.chat.id, '–¢—É—Ç –≤—Å–µ –ø—Ä–æ—Å—Ç–æ) \n'
                                            '–í—Å—ñ –¥–∞–Ω–Ω—ñ —Å–ª—ñ–¥ –∑–∞–ø–∏—Å—É–≤–∞—Ç–∏ —á–µ—Ä–µ–∑ –∫–æ–º—É, –∞ –∫–æ–ª–∏ –ø–æ–±–∞—á–∏—Ç–µ "üî¥",'
                                            '—Ç–æ —Ç—Ä–µ–±–∞ –≤–≤–æ–¥–∏—Ç–∏ —Å–≤–æ—ó –¥–∞–Ω–Ω—ñ –ø–æ –æ–¥–Ω–æ–º—É, —Ç–æ–±—Ç–æ –æ–¥–∏–Ω –ø—É–Ω–∫—Ç'
                                            ' –≤ –æ–¥–Ω–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ.\n'
                                            '–ü—Ä–æ–ø–æ–Ω—É—î–º–æ —Å–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–¥–∏–≤–∏—Ç–∏—Å—è –ø—Ä–∏–∫–ª–∞–¥ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è: /example')


@dp.message_handler(commands=['example'], state='*')
async def example(message: types.Message):
    photo = open('resume_example.jpg', 'rb')
    await bot.send_message(message.chat.id, '–û—Å—å –ø—Ä–∏–∫–ª–∞–¥ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ä–µ–∑—é–º–µ:')
    await bot.send_photo(message.chat.id, photo=photo)


@dp.message_handler(commands=['clear'], state='*')
async def clear(message: types.Message):
    await bot.send_message(message.chat.id, '–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ –¥–∞–Ω–Ω—ñ?', reply_markup=confirm)


@dp.message_handler(commands=['start'], state='*')
async def start(message: types.Message):
    try:
        await db_executions.add_id(message.chat.id)
    except:
        pass
    await bot.send_message(message.chat.id, 'üëã–ü—Ä–∏–≤—ñ—Ç!üëã\n'  
                                            'üòÉ–¶–µ –±–æ—Ç –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∑—é–º–µ, –¥—É–º–∞—é —Ç–æ–±—ñ —Å–ø–æ–¥–æ–±–∞—î—Ç—å—Å—èüòÉ \n'
                                            '–Ø–∫—â–æ –≤–∏ –≤–ø–µ—Ä—à–µ —Å–∫–ª–∞–¥–∞—î—Ç–µ —Ä–µ–∑—é–º–µ, —Ç–æ –æ–∑–Ω–∞–π–æ–º—Ç–µ—Å—è —è–∫ —Ü–µ –∫—Ä–∞—â–µ –∑—Ä–æ–±–∏—Ç–∏: \n'
                                            '/instruction \n'
                                            '/example'.format(message.from_user.first_name), reply_markup=but_create)


@dp.message_handler(content_types=['text'])
async def create_resume(message: types.Message):
    if message.text == 'üìÑ–°—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–µ–∑—é–º–µüìÑ':
        reply_markup1 = ReplyKeyboardMarkup(resize_keyboard=True)
        await message.answer('–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ —ñ–º‚Äô—è —ñ –ø—Ä—ñ–∑–≤–∏—â–µ', reply_markup=reply_markup1)
        await Steps.name_surname.set()


@dp.message_handler(content_types=['text'], state=Steps.name_surname)
async def name_surname(message: types.Message):
    try:
        await db_executions.add_name_surname(message.chat.id, message.text)
        print('name_surname {}'.format(message.text))
        await Steps.phone_number.set()
        await message.answer('–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É')
    except:
        await bot.send_message(message.chat.id, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞')


@dp.message_handler(content_types=['text'], state=Steps.phone_number)
async def phone_number(message: types.Message):
    try:
        await db_executions.add_phone_number(message.chat.id, message.text)
        print('phone_number {}'.format(phone_number))
        await Steps.get_email.set()
        await message.answer('–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à email')
    except:
        await bot.send_message(message.chat.id, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞')


@dp.message_handler(state=Steps.get_email)
async def get_email(message: types.Message):
    try:
        await db_executions.add_email(message.chat.id, message.text)
        print('email {}'.format(get_email))
        await Steps.get_education.set()
        await message.answer('–ù–∞–ø–∏—à—ñ—Ç—å —Ä—ñ–≤–µ–Ω—å –≤–∞—à–æ—ó –æ—Å–≤—ñ—Ç–∏')
    except:
        await bot.send_message(message.chat.id, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞')


@dp.message_handler(state=Steps.get_education)
async def get_education(message: types.Message):
    try:
        await db_executions.add_education(message.chat.id, message.text)
        await message.answer('–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à—ñ Tech Skills')
        await Steps.get_tech_skills.set()
        print(get_education)
    except:
        await bot.send_message(message.chat.id, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞')


@dp.message_handler(state=Steps.get_tech_skills)
async def get_tech_skills(message: types.Message):
    try:
        await db_executions.add_tech_skills(message.chat.id, message.text)
        print('tech skills {}'.format(get_tech_skills))
        await Steps.get_soft_skills.set()
        await message.answer('–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à—ñ Soft Skills')
    except:
        await bot.send_message(message.chat.id, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞')


@dp.message_handler(state=Steps.get_soft_skills)
async def get_soft_skills(message: types.Message()):
    try:
        await db_executions.add_soft_skills(message.chat.id, message.text)
        print('soft skills {}'.format(get_soft_skills))
        await Steps.get_projects.set()
        await message.answer('–î–æ–¥–∞–π—Ç–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≤–∞—à—ñ –ø—Ä–æ–µ–∫—Ç–∏')
    except:
        await bot.send_message(message.chat.id, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞')


@dp.message_handler(state=Steps.get_projects)
async def get_projects(message: types.Message):
    try:
        await db_executions.add_projects(message.chat.id, message.text)
        get_projects = message.text
        print('projects {}'.format(get_projects))
        await Steps.get_lang.set()
        await message.answer('–ù–∞–ø–∏—à—ñ—Ç—å —è–∫—É –≤–∏ –∑–Ω–∞—î—Ç–µ –º–æ–≤—Éüî¥')
    except:
        await bot.send_message(message.chat.id, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞')


@dp.message_handler(state=Steps.get_lang)
async def get_lang(message: types.Message):
    try:
        if message.text.lower() == 'stop':
            await Steps.get_country.set()
            await message.answer('–ù–∞–ø–∏—à—ñ—Ç—å –∑ —è–∫–æ—ó –≤–∏ –∫—Ä–∞—ó–Ω–∏')
        else:
            await db_executions.add_lang(message.chat.id, message.text)
            print('lang{}'.format(get_lang))
            await Steps.get_lang_level.set()
            await message.answer('–ù–∞–ø–∏—à—ñ—Ç—å —Ä—ñ–≤–µ–Ω—å –º–æ–≤–∏üî¥', reply_markup=lists)
    except:
        await bot.send_message(message.chat.id, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞')


@dp.message_handler(state=Steps.get_lang_level)
async def get_lang_level(message: types.Message):
    try:
        if message.text.lower() == 'stop':
            await Steps.get_country.set()
            await message.answer('–ù–∞–ø–∏—à—ñ—Ç—å –∑ —è–∫–æ—ó –≤–∏ –∫—Ä–∞—ó–Ω–∏')
        else:
            await db_executions.add_lang_level(message.chat.id, message.text)
            print('lang_level {}'.format(get_lang_level))
            await Steps.get_lang.set()
            await message.answer('–ù–∞–ø–∏—à—ñ—Ç—å —è–∫—É –≤–∏ –∑–Ω–∞—î—Ç–µ –º–æ–≤—É')
    except:
        await bot.send_message(message.chat.id, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞')


@dp.message_handler(state=Steps.get_country)
async def get_country(message: types.Message):
    try:
        await db_executions.add_country(message.chat.id, message.text)
        print('country {}'.format(get_country))
        await Steps.get_city.set()
        await message.answer('–ù–∞–ø–∏—à—ñ—Ç—å –∑ —è–∫–æ–≥–æ –≤–∏ –º—ñ—Å—Ç–∞')
    except:
        await bot.send_message(message.chat.id, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞')


@dp.message_handler(state=Steps.get_city)
async def get_city(message: types.Message):
    try:
        await db_executions.add_city(message.chat.id, message.text)
        print('city {}'.format(get_city))
        await Steps.get_profession.set()
        await message.answer('–ù–∞–ø–∏—à—ñ—Ç—å –Ω–∞ —è–∫—É –ø–æ—Å–∞–¥—É –ø—Ä–µ—Ç–µ–Ω–¥—É—î—Ç–µ')
    except:
        await bot.send_message(message.chat.id, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞')


@dp.message_handler(state=Steps.get_profession)
async def get_profession(message: types.Message):
    try:
        await db_executions.add_profession(message.chat.id, message.text)
        print('profession {}'.format(get_profession))
        await Steps.get_description.set()
        await message.answer('–ù–∞–ø–∏—à—ñ—Ç—å, —â–æ –≤–∏ –æ—á—ñ–∫—É—î—Ç–µ –≤—ñ–¥ —Ü—ñ—î—ó –ø–æ—Å–∞–¥–∏(–º–æ–∂–µ—Ç–µ —Ä–æ–∑–ø–æ–≤—ñ—Å—Ç–∏ —â–æ—Å—å –ø—Ä–æ —Å–µ–±–µ')
    except:
        await bot.send_message(message.chat.id, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞')


@dp.message_handler(state=Steps.get_description)
async def get_description(message: types.Message):
    try:
        await db_executions.add_description(message.chat.id, message.text)
        print('description {}'.format(get_description))
        await Steps.get_work_experience.set()
        await message.answer('–ù–∞–ø–∏—à—ñ—Ç—å –ø—Ä–æ –≤–∞—à –º–∏–Ω—É–ª–∏–π –¥–æ—Å–≤—ñ–¥ —Ä–æ–±–æ—Ç–∏(–Ω–∞–∑–≤–∞ –ø–æ—Å–∞–¥–∏)üî¥')
    except:
        await bot.send_message(message.chat.id, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞')


@dp.message_handler(state=Steps.get_work_experience)
async def get_work_experience(message: types.Message):
    try:
        if message.text.lower() == 'stop':
            await Steps.end_message.set()
            await message.answer('üòé–í–∞—à–µ —Ä–µ–∑—é–º–µ –≥–æ—Ç–æ–≤–µ, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Å–≤–æ—ó –¥–∞–Ω—ñ:üòé')
        else:
            await db_executions.add_past_work(message.chat.id, message.text)
            print('get_work_experience {}'.format(get_work_experience))
            await Steps.get_job_description.set()
            await message.answer('–û–ø–∏—à—ñ—Ç—å, —â–æ —Ä–æ–±–∏–ª–∏ –Ω–∞ —Ü—ñ–π —Ä–æ–±–æ—Ç—ñüî¥', reply_markup=lists)
    except:
        await bot.send_message(message.chat.id, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞')


@dp.message_handler(state=Steps.get_job_description)
async def get_job_description(message: types.Message):
    try:
        if message.text.lower() == 'stop':
            await Steps.end_message.set()
            await message.answer('üòé–í–∞—à–µ —Ä–µ–∑—é–º–µ –º–∞–π–∂–µ –≥–æ—Ç–æ–≤–µ, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Å–≤–æ—ó –¥–∞–Ω—ñ:üòé')
        else:
            await db_executions.add_job_description(message.chat.id, message.text)
            print('get_job_description {}'.format(get_job_description))
            await Steps.get_how_long.set()
            await message.answer('–°–∫—ñ–ª—å–∫–∏ —á–∞—Å—É –≤–∏ –∑–∞–π–º–∞–ª–∏ —Ü—é –ø–æ—Å–∞–¥—É?üî¥', reply_markup=lists)
    except:
        await bot.send_message(message.chat.id, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞')


@dp.message_handler(state=Steps.get_how_long)
async def get_how_long(message: types.Message):
    try:
        if message.text.lower() == 'stop':
            await Steps.end_message.set()
            await message.answer('üòé–í–∞—à–µ —Ä–µ–∑—é–º–µ –≥–æ—Ç–æ–≤–µ, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Å–≤–æ—ó –¥–∞–Ω—ñ:üòé')
        else:
            await db_executions.add_how_long(message.chat.id, message.text)
            print('get_how_long {}'.format(get_how_long))
            await Steps.get_work_experience.set()
            await message.answer('–ù–∞–ø–∏—à—ñ—Ç—å –ø—Ä–æ –≤–∞—à –º–∏–Ω—É–ª–∏–π –¥–æ—Å–≤—ñ–¥ —Ä–æ–±–æ—Ç–∏(–Ω–∞–∑–≤–∞ –ø–æ—Å–∞–¥–∏)üî¥', reply_markup=lists)
    except:
        await bot.send_message(message.chat.id, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞')


@dp.message_handler(state=Steps.end_message)
async def end_message(message: types.Message):
    result = await db_executions.select_all()
    right_user = ''
    for data_tuple in result:
        if int(message.chat.id) in data_tuple:
            right_user = data_tuple
    await message.answer(f"–Ü–º'—è —Ç–∞ –ø—Ä—ñ–∑–∏–≤—â–µ: {right_user[1]}\n"
                         f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: {right_user[2]}\n"
                         f"–ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –ø–æ—à—Ç–∞: {right_user[3]}\n"
                         f"–û—Å–≤—ñ—Ç–∞: {right_user[4]}\n"
                         f"Tech –ù–∞–≤–∏—á–∫–∏: {right_user[-5]}\n"
                         f"Soft –ù–∞–≤–∏—á–∫–∏: {right_user[-6]}\n"
                         f"–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≤–∞—à—ñ –ø—Ä–æ–µ–∫—Ç–∏: {right_user[-4]}\n"
                         f"–ú–æ–≤–∏: {right_user[5]}\n"
                         f"–†—ñ–≤–µ–Ω—å –∑–Ω–∞–Ω–Ω—è —Ü–∏—Ö –º–æ–≤:{right_user[6]}\n"
                         f"–í–∞—à–∞ –∫—Ä–∞—ó–Ω–∞: {right_user[7]}\n"
                         f"–í–∞—à–µ –º—ñ—Å—Ç–æ: {right_user[8]}\n"
                         f"–ü–æ—Å–∞–¥–∞ –Ω–∞ —è–∫—É –ø—Ä–µ—Ç–µ–Ω–¥—É—î—Ç–µ: {right_user[11]}\n"
                         f"–í–∞—à—ñ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤—ñ–¥ —Ä–æ–±–æ—Ç–∏: {right_user[10]}\n"
                         f"–í–∞—à –º–∏–Ω—É–ª–∏–π –¥–æ—Å–≤—ñ–¥ —Ä–æ–±–æ—Ç–∏(–º–∏–Ω—É–ª–∞ –ø–æ—Å–∞–¥–∞): {right_user[-1]}\n"
                         f"–©–æ –≤–∏ —Ä–æ–±–∏–ª–∏ –Ω–∞ —Ü—ñ–π –ø–æ—Å–∞–¥—ñ: {right_user[-2]}\n"
                         f"–°–∫—ñ–ª—å–∫–∏ —á–∞—Å—É –≤–∏ –∑–∞–π–º–∞–ª–∏ —Ü—é –ø–æ—Å–∞–¥—É: {right_user[-3]}\n"
                         "–ß–∏ —Ö–æ—á–µ—Ç–µ –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Å–≤–æ—ó –¥–∞–Ω—ñ?'\n", reply_markup=end_keyboard)


@dp.callback_query_handler(state='*')
async def bot_changes(callback: types.callback_query):
    if callback.data == '15':
        await bot.send_message(callback.from_user.id, "–©–æ –±–∞–∂–∞—î—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏?", reply_markup=changes)
    elif callback.data == '16':
        await db_executions.add_password(callback.chat.id)
        await bot.send_message(callback.from_user.id, "–í—Å–µ –≥–æ—Ç–æ–≤–æ, –º–æ–∂–µ—Ç–µ –∑–∞–π—Ç–∏ –¥–æ —Å–∞–π—Ç—É —ñ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–≤–æ—î —Ä–µ–∑—é–º–µ:")
        #–î–æ–¥–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å–∞–π—Ç
        # await bot.send_message(callback.from_user.id, "")

    if callback.data == 'name_surname':
        await bot.send_message(callback.from_user.id, "–ù–æ–≤–µ –Ω–æ–≤–µ –ø—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ —ñ–º'—è")
        await Steps.name_surname_edit.set()

    if callback.data == 'phone':
        await bot.send_message(callback.from_user.id, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É")
        await Steps.phone_number_edit.set()

    if callback.data == 'email':
        await bot.send_message(callback.from_user.id, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π email")
        await Steps.get_email_edit.set()

    if callback.data == 'education':
        await bot.send_message(callback.from_user.id, "–ù–∞–ø–∏—à—ñ—Ç—å —Ä—ñ–≤–µ–Ω—å –≤–∞—à–æ—ó –æ—Å–≤—ñ—Ç–∏")
        await Steps.get_education_edit.set()

    if callback.data == 'soft_skills':
        await bot.send_message(callback.from_user.id, "–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à—ñ Soft Skills")
        await Steps.get_soft_skills_edit.set()
    if callback.data == 'tech_skills':
        await bot.send_message(callback.from_user.id, "–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à—ñ Tech Skills")
        await Steps.get_tech_skills_edit.set()
    if callback.data == 'projects':
        await bot.send_message(callback.from_user.id, "–î–æ–¥–∞–π—Ç–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≤–∞—à—ñ –ø—Ä–æ–µ–∫—Ç–∏")
        await Steps.get_projects_edit.set()
    if callback.data == 'lang':
        await bot.send_message(callback.from_user.id, "–ù–∞–ø–∏—à—ñ—Ç—å —è–∫—ñ –≤–∏ –∑–Ω–∞—î—Ç–µ –º–æ–≤–∏ —Ç–∞ —Ä—ñ–≤–Ω—ñ –º–æ–≤")
        await Steps.get_lang.set()
    if callback.data == 'country':
        await bot.send_message(callback.from_user.id, "–ù–∞–ø–∏—à—ñ—Ç—å –∑ —è–∫–æ—ó –≤–∏ –∫—Ä–∞—ó–Ω–∏")
        await Steps.get_country_edit.set()
    if callback.data == 'city':
        await bot.send_message(callback.from_user.id, "–ù–∞–ø–∏—à—ñ—Ç—å –∑ —è–∫–æ–≥–æ –≤–∏ –º—ñ—Å—Ç–∞")
        await Steps.get_city_edit.set()
    if callback.data == 'profession':
        await bot.send_message(callback.from_user.id, "–ù–∞–ø–∏—à—ñ—Ç—å, —â–æ –≤–∏ –æ—á—ñ–∫—É—î—Ç–µ –≤—ñ–¥ —Ü—ñ—î—ó –ø–æ—Å–∞–¥–∏(–º–æ–∂–µ—Ç–µ —Ä–æ–∑–ø–æ–≤—ñ—Å—Ç–∏ —â–æ—Å—å –ø—Ä–æ —Å–µ–±–µ")
        await Steps.get_profession_edit.set()
    if callback.data == 'description':
        await bot.send_message(callback.from_user.id, "–ù–∞–ø–∏—à—ñ—Ç—å –ø—Ä–æ –≤–∞—à –º–∏–Ω—É–ª–∏–π –¥–æ—Å–≤—ñ–¥ —Ä–æ–±–æ—Ç–∏(–Ω–∞–∑–≤–∞ –ø–æ—Å–∞–¥–∏)")
        await Steps.get_description_edit.set()


@dp.message_handler(state=Steps.name_surname_edit)
async def edit_name_surname(message: types.Message):
    try:
        await db_executions.add_name_surname(message.from_user.id, message.text)
        await bot.send_message(message.from_user.id, '–í–∞—à—ñ –¥–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ')
        await bot.send_message(message.from_user.id, '–ë–∞–∂–∞—î—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —â–µ —â–æ—Å—å?', reply_markup=end_keyboard)
    except:
        await bot.send_message(message.from_user.id, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞')


@dp.message_handler(state=Steps.phone_number_edit)
async def edit_phone(message: types.Message):
    try:
        await db_executions.add_phone_number(message.from_user.id, message.text)
        await bot.send_message(message.from_user.id, '–í–∞—à—ñ –¥–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ')
        await bot.send_message(message.from_user.id, '–ë–∞–∂–∞—î—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —â–µ —â–æ—Å—å?', reply_markup=end_keyboard)
    except:
        await bot.send_message(message.from_user.id, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞')


@dp.message_handler(state=Steps.get_email_edit)
async def edit_email(message: types.Message):
    try:
        await db_executions.add_email(message.from_user.id, message.text)
        await bot.send_message(message.from_user.id, '–í–∞—à—ñ –¥–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ')
        await bot.send_message(message.from_user.id, '–ë–∞–∂–∞—î—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —â–µ —â–æ—Å—å?', reply_markup=end_keyboard)
    except:
        await bot.send_message(message.from_user.id, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞')


@dp.message_handler(state=Steps.get_education_edit)
async def edit_education(message: types.Message):
    try:
        await db_executions.add_education(message.from_user.id, message.text)
        await bot.send_message(message.from_user.id, '–í–∞—à—ñ –¥–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ')
        await bot.send_message(message.from_user.id, '–ë–∞–∂–∞—î—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —â–µ —â–æ—Å—å?', reply_markup=end_keyboard)
    except:
        await bot.send_message(message.from_user.id, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞')


@dp.message_handler(state=Steps.get_soft_skills_edit)
async def edit_soft_skills(message: types.Message):
    try:
        await db_executions.add_soft_skills(message.from_user.id, message.text)
        await bot.send_message(message.from_user.id, '–í–∞—à—ñ –¥–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ')
        await bot.send_message(message.from_user.id, '–ë–∞–∂–∞—î—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —â–µ —â–æ—Å—å?', reply_markup=end_keyboard)
    except:
        await bot.send_message(message.from_user.id, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞')


@dp.message_handler(state=Steps.get_tech_skills_edit)
async def edit_tech_skills(message: types.Message):
    try:
        await db_executions.add_tech_skills(message.from_user.id, message.text)
        await bot.send_message(message.from_user.id, '–í–∞—à—ñ –¥–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ')
        await bot.send_message(message.from_user.id, '–ë–∞–∂–∞—î—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —â–µ —â–æ—Å—å?', reply_markup=end_keyboard)
    except:
        await bot.send_message(message.from_user.id, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞')


@dp.message_handler(state=get_projects)
async def edit_projects(message: types.Message):
    try:
        await db_executions.add_projects(message.from_user.id, message.text)
        await bot.send_message(message.from_user.id, '–í–∞—à—ñ –¥–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ')
        await bot.send_message(message.from_user.id, '–ë–∞–∂–∞—î—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —â–µ —â–æ—Å—å?', reply_markup=end_keyboard)
    except:
        await bot.send_message(message.from_user.id, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞')


@dp.message_handler(state=Steps.get_lang_edit)
async def edit_lang(message: types.Message):
    try:
        if message.text.lower() == 'stop':
            await bot.send_message(message.from_user.id, '–í–∞—à—ñ –¥–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ')
            await bot.send_message(message.from_user.id, '–ë–∞–∂–∞—î—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —â–µ —â–æ—Å—å?', reply_markup=end_keyboard)
        else:
            await db_executions.clear_row(message.chat.id, 'lang')
            await db_executions.add_lang(message.from_user.id, message.text)
            await Steps.get_lang_level.set()
            await bot.send_message(message.from_user.id, '–ù–∞–ø–∏—à—ñ—Ç—å —Ä—ñ–≤–µ–Ω—å –º–æ–≤–∏üî¥', reply_markup=lists)
    except:
        await bot.send_message(message.from_user.id, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞')


@dp.message_handler(state=Steps.get_lang_level)
async def edit_lang_level(message: types.Message):
    try:
        if message.text.lower() == 'stop':
            await bot.send_message(message.from_user.id, '–í–∞—à—ñ –¥–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ')
            await bot.send_message(message.from_user.id, '–ë–∞–∂–∞—î—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —â–µ —â–æ—Å—å?', reply_markup=end_keyboard)
        else:
            await db_executions.clear_row(message.chat.id, 'lang_level')
            await db_executions.add_lang_level(message.from_user.id, message.text)
            await Steps.get_lang.set()
            await bot.send_message(message.from_user.id, '–ù–∞–ø–∏—à—ñ—Ç—å —è–∫—É –≤–∏ –∑–Ω–∞—î—Ç–µ –º–æ–≤—É')
    except:
        await bot.send_message(message.from_user.id, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞')


@dp.message_handler(state=Steps.get_country_edit)
async def edit_country(message: types.Message):
    try:
        await db_executions.add_country(message.from_user.id, message.text)
        await bot.send_message(message.from_user.id, '–í–∞—à—ñ –¥–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ')
        await bot.send_message(message.from_user.id, '–ë–∞–∂–∞—î—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —â–µ —â–æ—Å—å?', reply_markup=end_keyboard)
    except:
        await bot.send_message(message.from_user.id, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞')


@dp.message_handler(state=Steps.get_profession_edit)
async def edit_profession(message: types.Message):
    try:
        await db_executions.add_profession(message.from_user.id, message.text)
        await bot.send_message(message.from_user.id, '–í–∞—à—ñ –¥–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ')
        await bot.send_message(message.from_user.id, '–ë–∞–∂–∞—î—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —â–µ —â–æ—Å—å?', reply_markup=end_keyboard)
    except:
        await bot.send_message(message.from_user.id, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞')

@dp.message_handler(state=Steps.get_description_edit)
async def edit_description(message: types.Message):
    try:
        await db_executions.add_description(message.from_user.id, message.text)
        await Steps.get_work_experience.set()
        await message.answer('–ù–∞–ø–∏—à—ñ—Ç—å –ø—Ä–æ –≤–∞—à –º–∏–Ω—É–ª–∏–π –¥–æ—Å–≤—ñ–¥ —Ä–æ–±–æ—Ç–∏(–Ω–∞–∑–≤–∞ –ø–æ—Å–∞–¥–∏)')
    except:
        await bot.send_message(message.chat.id, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞')


@dp.message_handler(state=Steps.get_work_experience_edit)
async def edit_work_experience(message: types.Message):
    try:
        if message.text.lower() == 'stop':
            await bot.send_message(message.from_user.id, '–í–∞—à—ñ –¥–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ')
            await bot.send_message(message.from_user.id, '–ë–∞–∂–∞—î—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —â–µ —â–æ—Å—å?', reply_markup=end_keyboard)
        else:
            await db_executions.clear_row(message.chat.id, 'work_experience')
            await db_executions.add_past_work(message.from_user.id, message.text)
            print('get_work_experience {}'.format(get_work_experience))
            await Steps.get_job_description_edit.set()
            await message.answer('–û–ø–∏—à—ñ—Ç—å, —â–æ —Ä–æ–±–∏–ª–∏ –Ω–∞ —Ü—ñ–π —Ä–æ–±–æ—Ç—ñüî¥', reply_markup=lists)
    except:
        await bot.send_message(message.chat.id, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞')


@dp.message_handler(state=Steps.get_job_description_edit)
async def edit_job_description(message: types.Message):
    try:
        if message.text.lower() == 'stop':
            await bot.send_message(message.from_user.id, '–í–∞—à—ñ –¥–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ')
            await bot.send_message(message.from_user.id, '–ë–∞–∂–∞—î—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —â–µ —â–æ—Å—å?', reply_markup=end_keyboard)
        else:
            await db_executions.clear_row(message.chat.id, 'job_description')
            await db_executions.add_job_description(message.from_user.id, message.text)
            print('get_job_description {}'.format(get_job_description))
            await Steps.get_how_long_edit.set()
            await message.answer('–°–∫—ñ–ª—å–∫–∏ —á–∞—Å—É –≤–∏ –∑–∞–π–º–∞–ª–∏ —Ü—é –ø–æ—Å–∞–¥—É?üî¥', reply_markup=lists)
    except:
        await bot.send_message(message.chat.id, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞')


@dp.message_handler(state=Steps.get_how_long_edit)
async def edit_how_long(message: types.Message):
    try:
        if message.text.lower() == 'stop':
            await bot.send_message(message.from_user.id, '–í–∞—à—ñ –¥–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ')
            await bot.send_message(message.from_user.id, '–ë–∞–∂–∞—î—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —â–µ —â–æ—Å—å?', reply_markup=end_keyboard)
        else:
            await db_executions.clear_row(message.chat.id, 'how_long')
            await db_executions.add_how_long(message.from_user.id, message.text)
            print('get_how_long {}'.format(get_how_long))
            await Steps.get_work_experience_edit.set()
            await message.answer('–ù–∞–ø–∏—à—ñ—Ç—å –ø—Ä–æ –≤–∞—à –º–∏–Ω—É–ª–∏–π –¥–æ—Å–≤—ñ–¥ —Ä–æ–±–æ—Ç–∏(–Ω–∞–∑–≤–∞ –ø–æ—Å–∞–¥–∏)üî¥', reply_markup=lists)
    except:
        await bot.send_message(message.chat.id, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞')



async def on_startup(dp):
    await notify_admins(dp)

if __name__ == '__main__':
    executor.start_polling(dp, on_startup=on_startup)
